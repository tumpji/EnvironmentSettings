""" UTF-8 
" author: Jiri Tumpach
" Vimrc file 
" use vimx insted of vim
"

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" syntastic is a syntax checking plugin for vim 
" it runs through external syntax checkers and displys aany resulting errors
" to the user (on demand / automatically as the file is saved)
Plugin 'vim-syntastic/syntastic'
" fuzzy find and open files
Plugin 'kien/ctrlp.vim'
" youCompleteMe is C/C++/Python2/3 completer
Plugin 'Valloric/YouCompleteMe'
" easymotions enables fast movement inside document
Plugin 'easymotion/vim-easymotion'

Plugin 'scrooloose/nerdtree'

" C-hjkl and tmux 
Plugin 'christoomey/vim-tmux-navigator'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'

"Plugin 'itchyny/lightline.vim'
Plugin 'danro/rename.vim'
"Plugin 'Lokaltog/powerline'

"pep8 (python design recomendations)
Plugin 'nvie/vim-flake8'
Plugin 'tell-k/vim-autopep8'

" dracula color scheme for vim
Plugin 'dracula/vim'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Put your non-Plugin stuff after this line
"

" 256 color mode
set t_Co=256

""""""""""""""""""""""""""" 
" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"""""""""""""""""""""""""""
" youCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'


"""""""""""""""""""""""""""
" easymotion settings
let mapleader = " "

let g:EasyMotion_use_upper = 1 " 
let g:EasyMotion_smartcase = 1 " r = R
let g:EasyMotion_use_smartsign_us = 1 " # = 3
let g:EasyMotion_do_mapping = 0 " disable default easymotion mappings

" one char bothsides
nmap <Leader>c <Plug>(easymotion-bd-f)
" words bidirectional
nmap <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-bd-w)
" in search
nmap <Leader>n <Plug>(easymotion-bd-n)


""""""""""""""""""""""""""""""""
" flake8
highlight link Flake8_Error Error
autocmd BufWritePost *.py call Flake8()
let g:flake8_show_quickfix=1
""""""""""""""""""""""""""""""""
" autopep8
let g:autopep8_disable_show_diff=1
let g:autopep8_on_save = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" common vim settings

" let be encofing without bomb prefix (windows has problem with that)
set encoding=utf-8 nobomb

" color scheme
color dracula "or desert

" set system main clipboard as default
set clipboard=unnamedplus

" change search highlighting
"hi Search ctermbg=white ctermfg=red cterm=bold

" like relative number but with curent number in active line
set number relativenumber

" do not wrap lines
set nowrap

" tabs are 4 spaces wide (when inserting)
set tabstop=4
" number of characters used in \t
set shiftwidth=4
" all new \t will be changed to spaces
" to remove tabs and put spaces insted of them use command :retab
set expandtab

" show matching parenthesis
set showmatch

" search when not pressed enter yet
set incsearch

" autoindent - copy indent from current line when starting new
set autoindent
" copy structure of indent when autoindenting (spaces/tabs when not expandtab)
set copyindent

" ignore file when search for autocomplete etc
set wildignore=*.swp,*.swo,*swq
set wildignore+=*.pyc
set wildignore+=*.class
set wildignore+=*.o,*.exe,*.so,*.dll
set wildignore+=*.git,*.svn
set wildignore+=*.log,*.out

" change title of terminal when edditing something
set title

" 10x more undo
set undolevels=10000

" no .swp files (must be made by hand)
set nobackup
set noswapfile




"""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""
" syntastic

" syntastic color hightlighting (must be there to not be mask by setting
" color schemes
highlight link SyntasticError SpellBad
highlight link SyntasticWarning SpellCap   
hi SpellBad ctermfg=white ctermbg=red    cterm=bold
hi SpellCap ctermfg=black ctermbg=yellow cterm=bold


""""""""""""""""""""""""""""""""""""""""""""""""
" automatic headers

" insert at the beggining of file coment string with
function WriteHeader(...)
    let length_before=line('$')
    0read ~/.vim/templates/all.txt
    let length_after=line('$')
    let length_diff=length_after-length_before
    let string_diff='0,' . length_diff 

    " change predefined patterns to current variables
    silent! execute string_diff . "s/%file%/" . expand('%:t') . "/"           |
    silent! execute string_diff . "s/%date%/" . strftime('%Y %m.%d.') . "/"  |

    " argument with comment prefix is supplied 
    if a:0 != '0'
        silent! execute string_diff . "s:#:" . a:1 . ":"
    " default argument it is detected C++ language
    elseif expand('%') =~ ".*\\.\\(cpp\\|cc\\)$"
        silent! execute string_diff . "s:^#:" . '//' . ":"
    endif
endfunction

command! -nargs=? WriteHeader call WriteHeader(<args>)


" <when> <what file> <command>
" python
autocmd BufNewFile *.py   call WriteHeader() |
                        \ 0read ~/.vim/templates/python3.txt 

autocmd BufNewFile main.\(cpp\|cc\)
                        \ 0read ~/.vim/templates/main_cpp.txt
autocmd BufNewFile *.\(cpp\|cc\)
                        \ call WriteHeader() 
autocmd BufNewFile *.sh 
                        \ call WriteHeader() |
                        \ 0read ~/.vim/templates/sh.txt


" go to end 
autocmd BufNewFile *  normal G

